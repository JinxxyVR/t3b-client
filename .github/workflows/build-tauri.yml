name: 'Build and Release'

on:
  workflow_dispatch:

jobs:
  build-tauri-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      # install things
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # cache deps
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\.cargo\registry
            ~\.cargo\git
            src-tauri\target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # install deps
      - name: Install dependencies
        run: bun install
        
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
      # - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4
      #   with:
      #     sdk-version: 22621

      # - name: Setup dotnet
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: 8.x
      #     # cache: true
            
      # - name: Install trusted-signing
      #   run: |
      #     cargo install trusted-signing-cli --locked
      #     trusted-signing-cli --version

        
      # - name: Install azure-cli
      #   shell: pwsh
      #   run: |
      #     $ProgressPreference = 'SilentlyContinue';
      #     Invoke-WebRequest -Uri https://aka.ms/installazurecliwindowsx64 -OutFile .\AzureCLI.msi;
      #     Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet';
      #     Remove-Item .\AzureCLI.msi;
      #     az version

      # - name: Test trusted-signing-cli
      #   shell: pwsh
      #   env:
      #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #   run: |
      #     az version
      #     trusted-signing-cli --endpoint https://eus.codesigning.azure.net/ --account jinxxy --list-certificates

      # read files for version and app name
      - name: Get version from package.json
        id: package-version
        run: |
          $version = (Get-Content .\package.json | ConvertFrom-Json).version
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh
      - name: Get App Name from tauri.conf.json
        id: get-app-name
        shell: pwsh
        run: |
          $configFile = "src-tauri/tauri.conf.json"
          if (-not (Test-Path $configFile)) { Write-Error "tauri.conf.json not found"; exit 1 }
          try {
            $config = Get-Content $configFile | ConvertFrom-Json -ErrorAction Stop
            $appName = $config.productName
            if ([string]::IsNullOrWhiteSpace($appName)) { $appName = $config.mainBinaryName }
            if ([string]::IsNullOrWhiteSpace($appName)) { Write-Error "Could not find productName or mainBinaryName"; exit 1 }
            echo "APP_NAME=$appName" >> $env:GITHUB_OUTPUT
            Write-Host "App Name set to: $appName"
          } catch { Write-Error "Failed to parse/extract from ${configFile}: $_"; exit 1 }

      - name: Add Windows Trusted Signing
        shell: pwsh
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_ENDPOINT: ${{ vars.AZURE_ENDPOINT }}
          AZURE_CERT_PROFILE_NAME: ${{ vars.AZURE_CERT_PROFILE_NAME }}
          AZURE_CODE_SIGNING_NAME: ${{ vars.AZURE_CODE_SIGNING_NAME }}
        run: |
          $tempFolderPath = Join-Path $env:Temp "mtsc"
          $mtscName = Join-Path $tempFolderPath "mtsc.nuget.zip"
          $dlibName = Join-Path $tempFolderPath "bin" | Join-Path -ChildPath "x64" | Join-Path -ChildPath "Azure.CodeSigning.Dlib.dll" 
          $dmdName = Join-Path $tempFolderPath "metadata.json"
          $tauriConfJson = $env:TAURI_CONF_JSON ?? "./src-tauri/tauri.conf.json"
  
          if (-not(Test-Path -path $tauriConfJson)) {
            Throw "Unable to locate Tauri configuration at $taurConfJson"
          }
  
          $signTool = Get-Command "signtool.exe" -ErrorAction SilentlyContinue
          if ($signTool) {
            $signToolPath = Split-Path $signTool
          } else {
            if (Test-Path -path "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe") {
              $signToolpath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64"
            } else {
              Write-Host "Searching for signtool.exe in C:\Program Files (x86)"
              $signtoolMatches = Get-Childitem –Path "C:\Program Files (x86)" -Include signtool.exe -File -Recurse -ErrorAction SilentlyContinue
              if ($signtoolMatches.Length -gt 0) {
                $signToolPath = Split-path $signtoolMatches[0].FullName
              } else {
                Write-Host "Searching for signtool.exe in C:\Program Files"
                $signtoolMatches = Get-Childitem –Path "C:\Program Files" -Include signtool.exe -File -Recurse -ErrorAction SilentlyContinue
                if ($signtoolMatches.Length -gt 0) {
                  $signToolPath = Split-path $signtoolMatches[0].FullName
                }
              }
            }
          }
  
          if ($signToolPath) {
            Write-Host "Appending location of signtool.exe to PATH: $signToolPath"
            Add-Content $env:GITHUB_PATH $signToolPath
          } else {
            Throw "Unable to locate signtool.exe"
          }
  
          if (-not(Test-Path -path $tempFolderPath)) {
              New-Item -Type Directory -Path $tempFolderPath | Out-Null
              Write-Host "Download Microsoft.Trusted.Signing.Client to $mtscName"
              $global:ProgressPreference = "SilentlyContinue"
              Invoke-WebRequest "https://www.nuget.org/api/v2/package/Microsoft.Trusted.Signing.Client/" -OutFile $mtscName
              Write-Host "Extracting $mtscName"
              Expand-Archive $mtscName -Force -DestinationPath $tempFolderPath
              $global:ProgressPreference = 'Continue'
          }
  
          Write-Host "Saving Autheticode digest to $dmdName"
          $metadata = [PSCustomObject]@{
              Endpoint               = $env:AZURE_ENDPOINT
              CodeSigningAccountName = $env:AZURE_CODE_SIGNING_NAME
              CertificateProfileName = $env:AZURE_CERT_PROFILE_NAME
          }
          $metadataAsJson = ConvertTo-Json -Depth 100 $metadata
          Set-Content -Path $dmdName -Value $metadataAsJson
  
          $batchName = Join-Path $tempFolderPath "signtool.bat"
          Set-Content -Path $batchName -Value """$signToolPath"" sign /v /fd SHA256 /tr http://timestamp.acs.microsoft.com /td SHA256 /dlib $dlibName /dmdf $dmdName %1"
  
          $signCommand = "signtool sign /v /fd SHA256 /tr http://timestamp.acs.microsoft.com /td SHA256 /dlib $dlibName /dmdf $dmdName %1"
          Write-Host "Updating Windows signCommand in $tauriConfJson to $signCommand"
          $tauriConfigData = ConvertFrom-Json(Get-Content $tauriConfJson -Raw)
          $tauriConfigData.bundle.windows | Add-Member -Force -MemberType NoteProperty -Name signCommand -Value $signCommand
          $tauriConfigDataAsJson = ConvertTo-Json -Depth 100 $tauriConfigData
          Set-Content -Path $tauriConfJson -Value $tauriConfigDataAsJson
  
          Write-Host "Login to Azure"
          az login --service-principal --output none -t $env:AZURE_TENANT_ID -u $env:AZURE_CLIENT_ID -p $env:AZURE_CLIENT_SECRET
      # - name: run tauri bundle
      #   shell: pwsh
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #     TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
      #   run: |
      #     bun run tauri bundle
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # azure trusted sign
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          # tauri update key
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
          # sccache
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'Jinxxy Direct Client v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: true

      # - name: Sign Windows Artifacts (Azure Code Signing - Client Secret)
      #   uses: azure/trusted-signing-action@v0
      #   with:
      #     azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     endpoint: ${{ secrets.AZURE_ENDPOINT }}
      #     trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
      #     certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

      #     # Files to Sign
      #     files-folder: ${{ github.workspace }}/src-tauri/target/release
      #     files-folder-filter: exe,msi
      #     # verbosity: detailed # Uncomment for detailed signing logs

      # - name: Create GitHub Release and Upload Artifacts
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: v${{ steps.package-version.outputs.VERSION }} # Use version from package.json
      #     name: 'Release v${{ steps.package-version.outputs.VERSION }}'
      #     body: |
      #       Windows release v${{ steps.package-version.outputs.VERSION }}
      #     draft: false
      #     prerelease: false
      #     files: | # Upload signed artifacts + updater files
      #       src-tauri/target/release/bundle/msi/${{ steps.get-app-name.outputs.APP_NAME }}_*.msi
      #       src-tauri/target/release/bundle/msi/${{ steps.get-app-name.outputs.APP_NAME }}_*.msi.zip
      #       src-tauri/target/release/${{ steps.get-app-name.outputs.APP_NAME }}.exe
      #       src-tauri/target/release/*.sig
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needs token to create release
